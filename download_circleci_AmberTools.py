#!/usr/bin/env python

import sys
import requests
import json
import subprocess

try:
    sys.argv.remove('--info')
    only_show_info = True
except ValueError:
    only_show_info = False

repo = 'ambertools-test'
branch = 'nightly'
build_num = 'latest'

url_info = "https://circleci.com/api/v1.1/project/github/Amber-MD/{repo}/tree/{branch}".format(repo=repo,
    branch=branch)

# token was generated by visiting: https://circleci.com/account/api
token = '4d9a85018d7c18e2a869cf57231ee86c020da0c6'
base_dir = 'https://circleci.com/api/v1.1/project/github/Amber-MD/'
my_branch = '{repo}/{build_num}/artifacts?circle-token={token}&branch={branch}&filter=successful'.format(token=token,
            repo=repo,
            branch=branch,
            build_num=build_num)
url_artifact_info = base_dir + my_branch
    
def get_circle_info(url):
    # info: List[Dict]
    x = requests.get(url)
    json.loads(x.content.decode())
    info = json.loads(x.content.decode())
    return info

def download_non_conda_install_tarfiles():
    # require: wget
    info = get_circle_info(url_artifact_info)

    for path_dict in info:
        if 'non-conda-install' in path_dict['pretty_path']:
            url = path_dict['url']
            print('Downloading ', url)
            subprocess.check_output(['wget', url])

def get_latest_build_info():
    info_collection = get_circle_info(url_info)

    for info in info_collection:
        if info['status'] == 'success':
            break

    keys = [
      'username', 'branch',
      'author_name', 'committer_date',
      'has_artifacts', 'build_url',
      'vcs_url', 'status',
      'build_num',
      'all_commit_details',
    ]

    for k in keys:
        if k == 'all_commit_details':
            details = info.get(k)[0]
            print(details['body'])
        else:
            print(k, info.get(k))
    print("")

if __name__ == '__main__':
    get_latest_build_info()
    if not only_show_info:
        download_non_conda_install_tarfiles()
    else:
        print('skip downloading since --info is given')
